import { ObjectId } from "mongodb";
import { init } from "@lib/mongo";

export default function(collection_name) {
  function list(condition = {}, projection = {}) {
    return async (req, res) => {
      const {db} = await init();
      const collection = db.collection(collection_name);
      const records = await collection.find(condition, projection).toArray();
      return res.end(JSON.stringify(records));
    }
  }

  function get(projection = {}) {
    return async (req, res) => {
      const {db} = await init();
      const collection = db.collection(collection_name);
      const condition = !!req.params.id ? { _id: ObjectId(req.params.id) } : { ...req.params };
      const record = await collection.findOne({ condition }, projection)
      return res.end(JSON.stringify(record));
    }
  }

  function post() {
    return async (req, res) => {
      const {db} = await init();
      const collection = db.collection(collection_name);
      const record = req.body;
      console.log("record", record);
      const result = await collection.insertOne(record)
      return res.end(JSON.stringify(result));
    }
  }

  function patch() {
    return async (req, res) => {
      const {db} = await init();
      const collection = db.collection(collection_name);
      const condition = !!req.params.id ? { _id: ObjectId(req.params.id) } : { ...req.params };
      const record = req.body;
      delete record._id // we have remove the _id so that there is no attempt to update it
      const result = await collection.updateOne(condition, { '$set': req.body });
      return res.end(JSON.stringify(result));
    }
  }

  function del() {
    return async (req, res) => {
      const {db} = await init();
      const collection = db.collection(collection_name);
      const condition = !!req.params.id ? { _id: ObjectId(req.params.id) } : { ...req.params };
      const result = await collection.removeOne(condition);
      return res.end(JSON.stringify(result));
    }
  }

  return { list, get, post, patch, del };
}